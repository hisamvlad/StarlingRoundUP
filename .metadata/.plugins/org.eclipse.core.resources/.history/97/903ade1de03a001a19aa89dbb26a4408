package com.example.demo.service;

public class RetrieveTransactionsServiceTest {
	 private RestTemplate restTemplate = mock(RestTemplate.class);

	    private HttpHeadersGenerator httpHeadersGenerator = mock(HttpHeadersGenerator.class);

	    private RetrieveTransactionsService retrieveTransactionsService;

	    @BeforeEach
	    public void before() {
	        retrieveTransactionsService = new RetrieveTransactionsService(restTemplate, httpHeadersGenerator);
	    }

	    @Test
	    public void shouldRetrieveTransactions() {

	        ResponseEntity responseEntity = mock(ResponseEntity.class);
	        TransactionResponse transactionResponse = mock(TransactionResponse.class);
	        EmbeddedTransactions embeddedTransactions = mock(EmbeddedTransactions.class);
	        Transaction transaction = mock(Transaction.class);
	        when(embeddedTransactions.getTransactions()).thenReturn(List.of(transaction));
	        when(transactionResponse.getEmbeddedTransactions()).thenReturn(embeddedTransactions);
	        when(responseEntity.getBody()).thenReturn(transactionResponse);
	        when(restTemplate.exchange(eq("https://api-sandbox.starlingbank.com/api/v1/transactions"),
	                eq(HttpMethod.GET), any(HttpEntity.class), any(ParameterizedTypeReference.class))).thenReturn(responseEntity);

	        List<Transaction> transactions = retrieveTransactionsService.getTransactions();

	        assertEquals(List.of(transaction), transactions);
	    }
}
